config.load_autoconfig(False)

# Enable dark mode for websites
c.colors.webpage.darkmode.enabled = True
c.colors.webpage.darkmode.policy.images = 'never'

# Set your custom homepage
c.url.default_page = 'file:///home/djraul/Code/practice/searchbox/searchbox.html'
c.url.start_pages = ['file:///home/djraul/Code/practice/searchbox/searchbox.html']

# Fullscreen and minimalistic settings
c.statusbar.show = 'in-mode'  # Hide statusbar except when in command/hint mode
c.tabs.show = 'switching'     # Only show tabs when switching between them
c.scrolling.bar = 'never'     # Hide scrollbars completely
c.completion.height = '30%'   # Smaller completion popup

# Remove window decorations for true fullscreen feel
c.window.hide_decoration = True

# ================================
# VIBRANT NEON COLOR SCHEME
# ================================

# Vibrant Neon Color Scheme
neon = {
    'bg_dark': '#0a0a0a',        # Deep black
    'bg_darker': '#000000',      # Pure black
    'bg_light': '#1a1a1a',       # Slightly lighter black
    'bg_medium': '#2a2a2a',      # Medium dark
    'text': '#00ff00',           # Neon green
    'accent': '#00ffff',         # Neon cyan
    'pink': '#ff00ff',           # Neon magenta
    'yellow': '#ffff00',         # Neon yellow
    'red': '#ff0040',            # Neon red
    'blue': '#0080ff',           # Neon blue
    'purple': '#8000ff',         # Neon purple
    'orange': '#ff8000',         # Neon orange
}

# Statusbar (minimal, only shown in modes)
c.colors.statusbar.normal.bg = neon['bg_darker']
c.colors.statusbar.normal.fg = neon['text']
c.colors.statusbar.command.bg = neon['bg_dark']
c.colors.statusbar.command.fg = neon['accent']
c.colors.statusbar.insert.bg = neon['bg_dark']
c.colors.statusbar.insert.fg = neon['pink']

# Tabs (clean, vibrant)
c.colors.tabs.bar.bg = neon['bg_darker']
c.colors.tabs.even.bg = neon['bg_dark']
c.colors.tabs.odd.bg = neon['bg_dark']
c.colors.tabs.even.fg = neon['text']
c.colors.tabs.odd.fg = neon['text']
c.colors.tabs.selected.even.bg = neon['accent']
c.colors.tabs.selected.odd.bg = neon['accent']
c.colors.tabs.selected.even.fg = neon['bg_darker']
c.colors.tabs.selected.odd.fg = neon['bg_darker']

# Completion (vibrant suggestions)
c.colors.completion.category.bg = neon['bg_dark']
c.colors.completion.category.fg = neon['pink']
c.colors.completion.even.bg = neon['bg_light']
c.colors.completion.odd.bg = neon['bg_medium']
c.colors.completion.fg = neon['text']
c.colors.completion.item.selected.bg = neon['blue']
c.colors.completion.item.selected.fg = neon['bg_darker']

# Hints (bright and visible)
c.colors.hints.bg = neon['yellow']
c.colors.hints.fg = neon['bg_darker']
c.colors.hints.match.fg = neon['red']

# Downloads bar
c.colors.downloads.bar.bg = neon['bg_dark']
c.colors.downloads.start.bg = neon['blue']
c.colors.downloads.start.fg = neon['bg_darker']
c.colors.downloads.stop.bg = neon['text']
c.colors.downloads.stop.fg = neon['bg_darker']
c.colors.downloads.error.bg = neon['red']
c.colors.downloads.error.fg = neon['bg_darker']

# Prompts (clean dialogs)
c.colors.prompts.bg = neon['bg_medium']
c.colors.prompts.fg = neon['text']
c.colors.prompts.border = f"2px solid {neon['accent']}"
c.colors.prompts.selected.bg = neon['purple']
c.colors.prompts.selected.fg = neon['bg_darker']

# Additional UI elements
c.colors.messages.error.bg = neon['red']
c.colors.messages.error.fg = neon['bg_darker']
c.colors.messages.warning.bg = neon['orange']
c.colors.messages.warning.fg = neon['bg_darker']
c.colors.messages.info.bg = neon['blue']
c.colors.messages.info.fg = neon['bg_darker']

# ================================
# READING-OPTIMIZED SETTINGS
# ================================

# Typography for better reading
c.fonts.default_family = ['Liberation Serif', 'Georgia', 'Times New Roman', 'serif']
c.fonts.default_size = '12pt'              # Larger for reading comfort
c.fonts.web.family.serif = 'Liberation Serif'
c.fonts.web.family.sans_serif = 'Liberation Sans'

# Zoom settings for comfortable reading
c.zoom.default = '110%'                    # Slightly larger by default
c.zoom.levels = ['50%', '75%', '90%', '100%', '110%', '125%', '150%', '200%', '300%']

# Content display
c.content.default_encoding = 'utf-8'
c.scrolling.smooth = True                  # Smooth reading experience

# ================================
# CONTENT BLOCKING (ANTI-DISTRACTION)
# ================================

# Aggressive content blocking
c.content.blocking.enabled = True
c.content.blocking.method = 'adblock'
c.content.blocking.adblock.lists = [
    'https://easylist.to/easylist/easylist.txt',
    'https://easylist.to/easylist/easyprivacy.txt',
    'https://secure.fanboy.co.nz/fanboy-annoyance.txt',
    'https://raw.githubusercontent.com/uBlockOrigin/uAssets/master/filters/filters.txt'
]

# Block distracting content
c.content.images = True                     # Allow images (for research)
c.content.javascript.enabled = True        # Allow JS (many academic sites need it)
c.content.plugins = False                  # Block plugins
c.content.autoplay = False                 # No auto-playing media
c.content.notifications.enabled = False    # No notifications
c.content.geolocation = False              # No location tracking
c.content.media.audio_capture = False      # No microphone
c.content.media.video_capture = False      # No camera
c.content.media.audio_video_capture = False

# ================================
# SELECTIVE PRIVACY - WORKING VERSION
# ================================

# List of distracting sites
DISTRACTION_SITES = [
    'youtube.com',
    'www.youtube.com',
    'm.youtube.com',
    'facebook.com', 
    'www.facebook.com',
    'twitter.com',
    'x.com',
    'instagram.com',
    'www.instagram.com',
    'tiktok.com',
    'www.tiktok.com',
    'reddit.com',
    'www.reddit.com',
    'netflix.com',
    'twitch.tv',
    'discord.com'
]

# Apply settings that DO work with URL patterns
for site in DISTRACTION_SITES:
    # These settings work with URL patterns:
    config.set('content.cookies.accept', 'never', f'*://{site}/*')
    config.set('content.local_storage', False, f'*://{site}/*')
    config.set('content.notifications.enabled', False, f'*://{site}/*')
    config.set('content.geolocation', False, f'*://{site}/*')
    
    # Optional: Block JavaScript on social media (might break functionality)
    # config.set('content.javascript.enabled', False, f'*://{site}/*')

# ================================
# GLOBAL SETTINGS (PRIVACY-FRIENDLY)
# ================================

# Default settings for all sites (privacy-friendly but functional)
c.content.cookies.accept = 'no-3rdparty'  # Block tracking cookies, allow functional ones
c.content.local_storage = True            # Allow for most sites (needed for many apps)
c.content.javascript.enabled = True      # Enable JS (most sites need it)
c.content.notifications.enabled = False  # Block notifications globally
c.content.geolocation = False             # Block location tracking globally

# Privacy settings that work globally
c.content.webgl = False                   # Disable WebGL (privacy)
c.content.canvas_reading = False          # Prevent canvas fingerprinting
c.content.headers.do_not_track = True     # Send Do Not Track header

# ================================
# AUTOMATIC CACHE CLEARING
# ================================

# Clear cache on exit (affects all sites, but that's okay)
import atexit
import os

def clear_cache_on_exit():
    """Clear browser cache when qutebrowser exits"""
    try:
        cache_dir = os.path.expanduser('~/.cache/qutebrowser')
        if os.path.exists(cache_dir):
            import shutil
            shutil.rmtree(cache_dir, ignore_errors=True)
        print("ðŸ§¹ Cache cleared!")
    except:
        pass  # Fail silently

atexit.register(clear_cache_on_exit)

# ================================
# MANUAL PRIVACY CONTROLS
# ================================

# Commands you can type to control privacy
c.aliases = {
    'clear-cache': 'spawn --userscript clear-cache',
    'privacy-max': 'set content.cookies.accept never ;; message-info "Maximum privacy enabled"',
    'privacy-normal': 'set content.cookies.accept no-3rdparty ;; message-info "Normal privacy restored"',
}

# Keyboard shortcuts for privacy
config.bind('mp', 'privacy-max')      # Max privacy
config.bind('mn', 'privacy-normal')   # Normal privacy

# ================================
# DOWNLOADS AUTO-CLEANUP
# ================================

# Remove downloads after a short time (so you can cancel if needed)
c.downloads.remove_finished = 3000  # Remove after 3 seconds

# ================================
# COMPLETION SETTINGS
# ================================

# Reduce history suggestions (less distraction)
c.completion.web_history.max_items = 100  # Keep some history, but not too much

print("âœ“ Fixed selective privacy config loaded!")
print("  ðŸš« Social media: No cookies, no tracking")
print("  âœ… Other sites: Functional cookies allowed")
print("  ðŸ§¹ Cache cleared automatically on exit")
print("  ðŸ”§ Use 'mp' for max privacy, 'mn' for normal")
